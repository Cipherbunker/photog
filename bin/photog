#!/usr/bin/perl
use warnings;
use strict;
use feature 'say';
use Photography::Website;
use Config::General;
use Cwd;
use Template; my $tt = Template->new({ABSOLUTE => 1});
use File::ShareDir 'dist_dir';

=head1 NAME

Photog! - The Photography Website Generator

=head1 SYNOPSIS

B<photog> [I<OPTIONS>]

=head1 DESCRIPTION

Photog! generates a unique, hierarchical, and chronologically sorted
photography website, complete with thumbnails and watermarked images,
based on the $HOME/Pictures folder.

=head1 OPTIONS

=over

=item B<-v>

Be more verbose

=item B<-q>

Be less verbose

=back

=head1 USAGE

The command B<photog> generates a complete photography website and
stores it in the location set by the configuration file
B<.photogrc>. See the CONFIGURATION section below for more about the
configuration details. If a previously generated website already
exists, Photog! will update it with the latest changes.

The website will show thumbnails of all JPEG files in the Pictures
folder sorted by EXIF date. Clicking on a thumbnail will give access
to a bigger, optionally watermarked image. The original images will
remain untouched (except when the configuration parameter
Manipulate_EXIF is set to true, see CONFIGURATION below).

Photog! will recurse into all subdirectories of the Pictures folder
and create corresponding subgalleries. The thumbnail of a subgallery
shows 3, 6 or 9 randomly selected images from that directory. The
exact number can be chosen when the gallery thumbnail is generated.
Once created, gallery thumbnails will not be overwritten, so just
delete the thumbnail file manually to regenerate it. To guide the sort
order of subdirectories, prepend the directory name with a date in
the format YYYY-MM-DD. Otherwise, Photog! will use a directory's
creation time for determining sort order.

If a directory beneath the Pictures folder contains the string
I<(hidden)>, the corresponding web gallery will not be listed in the
parent gallery. This feature allows the home page to remain
clutter-free while still having access to specific galleries by their
URL. If a directory contains the string I<(private)>, it will
not be available under it's regular name but by a generated URL
consisting of 32 alphanumeric characters. Use this feature to give
clients private access to their album without publishing it for
everyone to see.

View the resulting website by opening the website's index.html in a
web browser or serve the files from a web server. Note: when viewing
the website locally, not all functionality will work correctly due to
the limitations webbrowsers impose on local files. For best results,
serve the website from a webserver, which can be as simple as running
C<python -m SimpleHTTPServer> inside the website's directory.

To customize the generated website, edit the template file
B<index.template> that Photog! places inside the Pictures folder upon
the first run. Edit this file to add a custom logo, links to other
pages, etc. and then re-run Photog! to regenerate all website pages.

=head1 CONFIGURATION

The Photog! configuration lives in B<~/.photogrc>. When executing
B<photog> for the first time, it will ask a couple of questions
and write the answers to the configuration file. This file
contains a number of "variable = value" directives. Lines starting
with a C<#> are ignored. These are the available configuration
variables:

=head2 Artist

The name of the photographer. Will be used in the website's title, and
will be added to the EXIF info if Manipulate_EXIF is true. Multiple
"Artist =" directives are allowed, Photog! will ask for each untagged
picture who the photographer is.

=head2 Copyright

Copyright information. Will be added to the EXIF info if
Manipulate_EXIF is true. Otherwise unused.

=head2 Manipulate_EXIF

If set to true, Photog! will add the Artist and Copyright tags to the
EXIF information of the I<original> image files. As an added bonus, it
will also check if a corresponding raw file (*.dng, *.nef, *.cr2, or
*.crw) exists and copy over the MakerNote tag, since many image
processing software (*caugh* Lightroom) will remove this tag upon
exporting.

=head2 Pictures

The location of your Pictures folder.

=head2 Watermark

The location of your watermark file, which is preferably a transparent PNG graphic. If unset, web images will not be watermarked.

=head2 Website

The location of the generated photography website.

=head1 FILES

=head2 ~/.photogrc

The configuration file. See the section CONFIGURATION for the
available configuration parameters.

=head1 SEE ALSO

L<Photography::Website(3pm)|Photography::Website>, the Perl module
distributed with Photog! which takes care of the actual site
generation.

=head1 AUTHOR

Photog! was written by Jaap Joris Vens <jj@returntothesource.nl>, and
is used on his personal photography website http://www.superformosa.nl/

=cut

my $verbose;
my $silent;

sub ask;
sub confirm;
sub username;

# Read command line args
for (@ARGV) {
    $verbose = 1 if $_ eq '-v';
    $silent = 1 if $_ eq '-q';
}

unless (-f "$ENV{HOME}/.photogrc") {
    my $config = {};
    my $config_template = (dist_dir 'Photog') . "/templates/photogrc";

    print << 'EOM';

This seems to be the first time you run Photog! To generate your
photography website, please answer the following questions. For more
information read the manual page by typing "man photog".

Please type your answer after each question and press Enter, or accept
the [default answer] by pressing Enter.

EOM

    $config->{artist} = ask 'What is your full name?', username;
    $config->{copyright} = ask 'What copyright applies to your images?', 'All Rights Reserved';
    if (confirm 'Do you want to store this information in the EXIF data of your images?') {
        $config->{manipulate_exif} = 'true';
    }
    else {
        $config->{manipulate_exif} = 'false';
    }
    $config->{pictures} = ask 'Where are your pictures stored?', "$ENV{HOME}/Pictures";
    $config->{website} = ask "Where should the website be stored?", cwd . "/photography";

    $tt->process($config_template, $config, "$ENV{HOME}/.photogrc") or die $!;

    print << 'EOM';
Thank you! Your answers have been saved to ~/.photogrc. Feel free to
edit this file to change the settings.

EOM
    unless (confirm "Do you want to start generating your photography website?") {
        print "\nYou can start website generation at any time by running `photog`";
        exit 1;
    }
}

# Read config file
my $conf = Config::General->new("$ENV{HOME}/.photogrc");
my %config = $conf->getall or die "Error in confuration file ~/photogrc\n";
$config{Verbose} = $verbose;
$config{Silent} = $silent;

# Check mandatory variables
for ('Artist', 'Copyright', 'Manipulate_EXIF', 'Pictures', 'Website') {
    unless (defined $config{$_}) {
        die "The mandatory variable \"$_\" is not present in the configuration file ~/.photogrc. Please add it manually or delete the file so photog can regenerate it.";
    }
}

Photography::Website::generate(\%config);

sub ask {
    my $question = shift;
    my $default_answer = shift;
    print "$question [$default_answer] ";
    my $answer = <>;
    chomp $answer;
    print "\n";
    if ($answer) {
        return $answer;
    }
    else {
        return $default_answer;
    }
}

sub confirm {
    my $prompt = shift;
    my $answer = "";
    until ($answer =~ /^[yn]$/) {
        $answer = ask $prompt, 'y/n';
    }
    return $answer eq 'y';
}

sub username {
    my $name = (getpwnam getlogin)[6];
    $name =~ s/,.*$//;
    return $name;
}
