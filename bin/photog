#!/usr/bin/perl
use warnings;
use strict;
use Cwd;
use IPC::Cmd 'can_run';
use Photography::Website;

die <<EOM

ERROR: ImageMagick is not installed. Please install it in order to use
Photog!, preferably using your operating system's package manager. Try
one of the following commands:

    apt-get install imagemagick
    yum install ImageMagick
    pacman -S imagemagick
    brew install imagemagick

EOM
    unless can_run('convert') and can_run('composite');

=head1 NAME

Photog! - The Photography Website Generator

=head1 SYNOPSIS

B<photog> [I<-q>] [I<-v>] [I<destination>]

B<photog->[B<scale>, B<watermark>, B<thumbnail>, B<preview>]

=head1 DESCRIPTION

Photog! turns a directory tree of source images into a photography
website with nested albums of chronologically sorted photographs. To
get started, simply C<cd> to the source directory and call C<photog>
with the destination directory as its argument. Example:

    $ cd ~/Pictures
    $ photog ~/public_html

Upon the first run, Photog! writes the website destination to the file
C<photog.ini> inside the current directory. Subsequent runs of the
C<photog> command require no arguments, and do nothing unless images
inside the source directory tree have changed. Photog! only
regenerates the parts of the website that should be updated.

=head1 OPTIONS

=over

=item B<-q>

Be less verbose

=item B<-v>

Be more verbose

=back

=head1 CONFIGURATION

Photog! reads configuration directives from a file named C<photog.ini>
inside the current directory. Subdirectories can contain additional
configuration files that override certain settings from the root
configuration file. Config files consist of a number of C<variable =
value> directives. Lines starting with a C<#> are ignored.
Photog!'s default settings can be overridden by placing a file named
C<photog.ini> inside an album's source directory that contains lines
with C<variable = value> directives. A value set in the
configuration file will become the new default value for all child
albums.

Besides controlling the behavior of Photog!, all configuration options
are passed along to the template where they can be accessed as the
attribute of each "item" object. Here is an example (see Template::Manual::Intro(3) for an
introduction to the template syntax):

    [% FOREACH item in items %]
      [% IF item.type == 'image' %]
        <img src="[% item.src %]">
      [% ENDIF %]
    [% ENDFOR %]

This makes it possible to make up your own configuration variables
inside a C<photog.ini>, and then use their values when writing a
custom template. Your own variables will propagate to all child albums
just like the regular configuration options.

Images and albums are simply hash references with a number of
attributes. In code, these attributes can be accessed as follows:
C<$album->{url}>. In templates you can use the dot-syntax, e.g., C<[%
if item.type == 'image %]>. 

=head1 ADDITIONAL COMMANDS

Photog! calls the commands C<photog-scale>, C<photog-watermark>,
C<photog-thumbnail>, and C<photog-preview> to generate scaled,
watermarked, thumbnail and preview images. These commands are simple
shell scripts that have been installed to the same path as the
C<photog> command. They call ImageMagick to do the actual image
processing. You can also call these commands directly. They have no
manpages but they do print out a simple usage instruction when called
with no arguments. If you want to change Photog!'s behavior for
generating images and thumbnails, you can supply your own commands in
the configuration file (see directly above).

=head1 SEE ALSO

Photography::Website(3), the Perl module that takes care of the
actual site generation.

=head1 AUTHOR

Photog! was written by Jaap Joris Vens <jj@rtts.eu>, and is used to create
his personal photography website at http://www.superformosa.nl/

=cut

######################################################################

my $source = getcwd();
my $destination;

# Process arguments
for (@ARGV) {
    if ($_ eq '-v') {
        $Photography::Website::verbose = 1;
    }
    elsif ($_ eq '-q') {
        $Photography::Website::silent = 1;
    }
    elsif (not defined $destination) {
        $destination = $_;
    }
    else {
        die "Too many command-line arguments\n";
    }
}

# Create a fresh photog.ini
if (not -f "$source/photog.ini") {
    if ($destination) {
        open(my $fh, '>', "$source/photog.ini");
        print $fh "destination = $destination\n";
        close $fh;
    }
    else {
        die <<EOM

ERROR: No destination specified. Please specifiy a destination for
your photography website. You can do this either as a command-line
argument or in the configuration file 'photog.ini'. See 'man photog'
for more information.

EOM
            ;
    }
}

# Process the pictures tree
my $website = Photography::Website::create_album($source);

# Generate the website
Photography::Website::generate($website);
