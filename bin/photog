#!/usr/bin/perl
use warnings;
use strict;
use Cwd;
use Photography::Website;

=head1 NAME

Photog! - The Photography Website Generator

=head1 SYNOPSIS

B<photog> [I<-q>] [I<-v>] [I<destination>]

=head1 DESCRIPTION

Photog! turns a directory tree of source images into a photography
website with nested albums of chronologically sorted photographs. To
get started, simply C<cd> to the source directory and call C<photog>
with the destination directory as its argument. Example:

    $ cd ~/Pictures
    $ photog /var/www

Subsequent runs of the C<photog> command do nothing unless images
inside the source directory tree have changed. Photog! only
regenerates the parts of the website that should be updated.

=head1 OPTIONS

=over

=item B<-q>

Be less verbose

=item B<-v>

Be more verbose

=back

=head1 CONFIGURATION

Photog! reads configuration directives from a file named C<photog.ini>
inside the current directory. Subdirectories can contain additional
configuration files that override certain settings from the root
configuration file. Config files use L<Config::General(3pm)> syntax,
meaning they contain a number of C<variable = value> directives. The
C<=>-sign is optional, as is quoting variables. Lines starting with a
C<#> are ignored.

=over

=item B<title>

In the default template, the title appears at the top of the
page. The default value is the name of an album's source directory.

=item B<copyright>

In the default template, the copyright information appears at the
bottom of the page. The default value is empty.

=item B<template>

Path to an HTML file containing directives in
L<Template::Toolkit(3pm)> syntax. By default, Photog! uses the file
C<index.template> in this module's C<static> directory.

=item B<destination>

The destination directory. This variable has no default. It must be
specified as a command line argument or in the configuration
file.

=item B<sort>

Photos are always sorted according to EXIF date. Possible sort orders
are: C<ascending> and C<descending>. The default value is
C<descending>.

=item B<preview>

The number of images to include in an album preview. Default: 9.

=item B<slug>

The URL slug of the album that will be created from the current
directory. The default value is the directory's name.

=item B<date>

The ISO 8601 date and optionally time of this album. This is used when
sorting items chronologically. The default is the directory's
modification date.

=item B<fullscreen>

A boolean C<true> or C<false> to determine full-screen
capability. This prevents access to full-size images by clients who
haven't paid yet. Defaults to C<true>.

=item B<unlisted>

A boolean C<true> or C<false> that determines whether the current
album will be be unlisted on the parent webpage. The album page
remains accessible to people who know the URL. Defaults to C<false>.

=item B<private>

Like B<unlisted>, but Photog! will generate a random slug to use as
the album's URL and stores it in a file named C<PRIVATE.URL> inside
the album's source directory. Defaults to C<false>.

=item B<oblivious>

A boolean C<true> or C<false> that specifies whether C<photog.ini>
files are required. If C<true>, Photog! will only consider a
subdirectory an album when it contains a C<photog.ini> file, even if
the file is empty. Defaults to C<false>.

=back

=head1 SEE ALSO

L<Photography::Website(3pm)>, the Perl module that takes care of the
actual site generation.

=head1 AUTHOR

Photog! was written by Jaap Joris Vens <jj@rtts.eu>, and is used on
his personal photography website http://www.superformosa.nl/

=cut

######################################################################

die "ERROR: ImageMagick is not installed\n"
    unless `convert --version` =~ /ImageMagick/;

my $source = getcwd();
my $destination;

for (@ARGV) {
    if ($_ eq '-v') {
        $Photography::Website::verbose = 1;
    }
    elsif ($_ eq '-q') {
        $Photography::Website::silent = 1;
    }
    elsif (not defined $destination) {
        $destination = $_;
    }
    else {
        die "Too many command-line arguments\n";
    }
}

if (not -f "$source/photog.ini" and not defined $destination) {
    die "Please specifiy a destination for your photography website. You can do this as a command-line argument ('photog ../public_html') or in the configuration file 'photog.ini'. See 'man photog' for more information.\n";
}

# Process the pictures tree
my $website = Photography::Website::create_album($source);

# Generate the website
Photography::Website::generate($website);
